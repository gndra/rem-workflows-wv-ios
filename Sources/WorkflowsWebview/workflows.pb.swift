// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: workflows.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Workflows_Status: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case pristine // = 0
  case failed // = 1
  case error // = 2
  case success // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .pristine
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .pristine
    case 1: self = .failed
    case 2: self = .error
    case 3: self = .success
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .pristine: return 0
    case .failed: return 1
    case .error: return 2
    case .success: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Workflows_Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Workflows_Status] = [
    .pristine,
    .failed,
    .error,
    .success,
  ]
}

#endif  // swift(>=4.2)

public enum Workflows_Steps: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case enrollFull // = 0
  case documentSign // = 1
  case videoSign // = 2
  case documentPreview // = 3
  case personalAddress // = 4
  case verifyEmail // = 5
  case verifyPhoneNumber // = 6
  case UNRECOGNIZED(Int)

  public init() {
    self = .enrollFull
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .enrollFull
    case 1: self = .documentSign
    case 2: self = .videoSign
    case 3: self = .documentPreview
    case 4: self = .personalAddress
    case 5: self = .verifyEmail
    case 6: self = .verifyPhoneNumber
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .enrollFull: return 0
    case .documentSign: return 1
    case .videoSign: return 2
    case .documentPreview: return 3
    case .personalAddress: return 4
    case .verifyEmail: return 5
    case .verifyPhoneNumber: return 6
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Workflows_Steps: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Workflows_Steps] = [
    .enrollFull,
    .documentSign,
    .videoSign,
    .documentPreview,
    .personalAddress,
    .verifyEmail,
    .verifyPhoneNumber,
  ]
}

#endif  // swift(>=4.2)

public struct Workflows_Step {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var uuid: String = String()

  public var workflowUuid: String = String()

  public var status: Workflows_Status = .pristine

  public var step: String = String()

  public var payload: Dictionary<String,SwiftProtobuf.Google_Protobuf_Any> = [:]

  public var updatedAt: String = String()

  public var createdAt: String = String()

  public var metadata: Dictionary<String,SwiftProtobuf.Google_Protobuf_Any> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Workflows_Workflow {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var uuid: String = String()

  public var peopleUuid: String = String()

  public var status: Workflows_Status = .pristine

  public var metadata: Dictionary<String,SwiftProtobuf.Google_Protobuf_Any> = [:]

  public var error: Dictionary<String,SwiftProtobuf.Google_Protobuf_Any> = [:]

  public var updatedAt: String = String()

  public var createdAt: String = String()

  public var steps: [Workflows_Step] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Workflows_Status: @unchecked Sendable {}
extension Workflows_Steps: @unchecked Sendable {}
extension Workflows_Step: @unchecked Sendable {}
extension Workflows_Workflow: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "workflows"

extension Workflows_Status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "pristine"),
    1: .same(proto: "failed"),
    2: .same(proto: "error"),
    3: .same(proto: "success"),
  ]
}

extension Workflows_Steps: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "enroll_full"),
    1: .same(proto: "document_sign"),
    2: .same(proto: "video_sign"),
    3: .same(proto: "document_preview"),
    4: .same(proto: "personal_address"),
    5: .same(proto: "verify_email"),
    6: .same(proto: "verify_phone_number"),
  ]
}

extension Workflows_Step: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Step"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uuid"),
    2: .standard(proto: "workflow_uuid"),
    3: .same(proto: "status"),
    7: .same(proto: "step"),
    8: .same(proto: "payload"),
    6: .standard(proto: "updated_at"),
    5: .standard(proto: "created_at"),
    4: .same(proto: "metadata"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.uuid) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.workflowUuid) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 4: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.Google_Protobuf_Any>.self, value: &self.metadata) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.createdAt) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.updatedAt) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.step) }()
      case 8: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.Google_Protobuf_Any>.self, value: &self.payload) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.uuid.isEmpty {
      try visitor.visitSingularStringField(value: self.uuid, fieldNumber: 1)
    }
    if !self.workflowUuid.isEmpty {
      try visitor.visitSingularStringField(value: self.workflowUuid, fieldNumber: 2)
    }
    if self.status != .pristine {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 3)
    }
    if !self.metadata.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.Google_Protobuf_Any>.self, value: self.metadata, fieldNumber: 4)
    }
    if !self.createdAt.isEmpty {
      try visitor.visitSingularStringField(value: self.createdAt, fieldNumber: 5)
    }
    if !self.updatedAt.isEmpty {
      try visitor.visitSingularStringField(value: self.updatedAt, fieldNumber: 6)
    }
    if !self.step.isEmpty {
      try visitor.visitSingularStringField(value: self.step, fieldNumber: 7)
    }
    if !self.payload.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.Google_Protobuf_Any>.self, value: self.payload, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Workflows_Step, rhs: Workflows_Step) -> Bool {
    if lhs.uuid != rhs.uuid {return false}
    if lhs.workflowUuid != rhs.workflowUuid {return false}
    if lhs.status != rhs.status {return false}
    if lhs.step != rhs.step {return false}
    if lhs.payload != rhs.payload {return false}
    if lhs.updatedAt != rhs.updatedAt {return false}
    if lhs.createdAt != rhs.createdAt {return false}
    if lhs.metadata != rhs.metadata {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Workflows_Workflow: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Workflow"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uuid"),
    6: .standard(proto: "people_uuid"),
    7: .same(proto: "status"),
    2: .same(proto: "metadata"),
    8: .same(proto: "error"),
    3: .standard(proto: "updated_at"),
    4: .standard(proto: "created_at"),
    5: .same(proto: "steps"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.uuid) }()
      case 2: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.Google_Protobuf_Any>.self, value: &self.metadata) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.updatedAt) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.createdAt) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.steps) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.peopleUuid) }()
      case 7: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 8: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.Google_Protobuf_Any>.self, value: &self.error) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.uuid.isEmpty {
      try visitor.visitSingularStringField(value: self.uuid, fieldNumber: 1)
    }
    if !self.metadata.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.Google_Protobuf_Any>.self, value: self.metadata, fieldNumber: 2)
    }
    if !self.updatedAt.isEmpty {
      try visitor.visitSingularStringField(value: self.updatedAt, fieldNumber: 3)
    }
    if !self.createdAt.isEmpty {
      try visitor.visitSingularStringField(value: self.createdAt, fieldNumber: 4)
    }
    if !self.steps.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.steps, fieldNumber: 5)
    }
    if !self.peopleUuid.isEmpty {
      try visitor.visitSingularStringField(value: self.peopleUuid, fieldNumber: 6)
    }
    if self.status != .pristine {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 7)
    }
    if !self.error.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.Google_Protobuf_Any>.self, value: self.error, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Workflows_Workflow, rhs: Workflows_Workflow) -> Bool {
    if lhs.uuid != rhs.uuid {return false}
    if lhs.peopleUuid != rhs.peopleUuid {return false}
    if lhs.status != rhs.status {return false}
    if lhs.metadata != rhs.metadata {return false}
    if lhs.error != rhs.error {return false}
    if lhs.updatedAt != rhs.updatedAt {return false}
    if lhs.createdAt != rhs.createdAt {return false}
    if lhs.steps != rhs.steps {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
