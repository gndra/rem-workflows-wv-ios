// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: definitions.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Workflows_Step {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var uuid: String = String()

  public var workflowUuid: String = String()

  public var status: String = String()

  public var step: String = String()

  public var payload: SwiftProtobuf.Google_Protobuf_Struct {
    get {return _payload ?? SwiftProtobuf.Google_Protobuf_Struct()}
    set {_payload = newValue}
  }
  /// Returns true if `payload` has been explicitly set.
  public var hasPayload: Bool {return self._payload != nil}
  /// Clears the value of `payload`. Subsequent reads from it will return its default value.
  public mutating func clearPayload() {self._payload = nil}

  public var error: SwiftProtobuf.Google_Protobuf_Struct {
    get {return _error ?? SwiftProtobuf.Google_Protobuf_Struct()}
    set {_error = newValue}
  }
  /// Returns true if `error` has been explicitly set.
  public var hasError: Bool {return self._error != nil}
  /// Clears the value of `error`. Subsequent reads from it will return its default value.
  public mutating func clearError() {self._error = nil}

  public var updatedAt: String = String()

  public var createdAt: String = String()

  public var metadata: SwiftProtobuf.Google_Protobuf_Struct {
    get {return _metadata ?? SwiftProtobuf.Google_Protobuf_Struct()}
    set {_metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  public var hasMetadata: Bool {return self._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  public mutating func clearMetadata() {self._metadata = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _payload: SwiftProtobuf.Google_Protobuf_Struct? = nil
  fileprivate var _error: SwiftProtobuf.Google_Protobuf_Struct? = nil
  fileprivate var _metadata: SwiftProtobuf.Google_Protobuf_Struct? = nil
}

public struct Workflows_Workflow {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var uuid: String = String()

  public var peopleUuid: String = String()

  public var status: String = String()

  public var metadata: SwiftProtobuf.Google_Protobuf_Struct {
    get {return _metadata ?? SwiftProtobuf.Google_Protobuf_Struct()}
    set {_metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  public var hasMetadata: Bool {return self._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  public mutating func clearMetadata() {self._metadata = nil}

  public var error: SwiftProtobuf.Google_Protobuf_Struct {
    get {return _error ?? SwiftProtobuf.Google_Protobuf_Struct()}
    set {_error = newValue}
  }
  /// Returns true if `error` has been explicitly set.
  public var hasError: Bool {return self._error != nil}
  /// Clears the value of `error`. Subsequent reads from it will return its default value.
  public mutating func clearError() {self._error = nil}

  public var updatedAt: String = String()

  public var createdAt: String = String()

  public var expiresIn: Int32 = 0

  public var steps: [Workflows_Step] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _metadata: SwiftProtobuf.Google_Protobuf_Struct? = nil
  fileprivate var _error: SwiftProtobuf.Google_Protobuf_Struct? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Workflows_Step: @unchecked Sendable {}
extension Workflows_Workflow: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "workflows"

extension Workflows_Step: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Step"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uuid"),
    2: .standard(proto: "workflow_uuid"),
    3: .same(proto: "status"),
    7: .same(proto: "step"),
    8: .same(proto: "payload"),
    9: .same(proto: "error"),
    6: .standard(proto: "updated_at"),
    5: .standard(proto: "created_at"),
    4: .same(proto: "metadata"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.uuid) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.workflowUuid) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.status) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._metadata) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.createdAt) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.updatedAt) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.step) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._payload) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &self._error) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.uuid.isEmpty {
      try visitor.visitSingularStringField(value: self.uuid, fieldNumber: 1)
    }
    if !self.workflowUuid.isEmpty {
      try visitor.visitSingularStringField(value: self.workflowUuid, fieldNumber: 2)
    }
    if !self.status.isEmpty {
      try visitor.visitSingularStringField(value: self.status, fieldNumber: 3)
    }
    try { if let v = self._metadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    if !self.createdAt.isEmpty {
      try visitor.visitSingularStringField(value: self.createdAt, fieldNumber: 5)
    }
    if !self.updatedAt.isEmpty {
      try visitor.visitSingularStringField(value: self.updatedAt, fieldNumber: 6)
    }
    if !self.step.isEmpty {
      try visitor.visitSingularStringField(value: self.step, fieldNumber: 7)
    }
    try { if let v = self._payload {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    } }()
    try { if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Workflows_Step, rhs: Workflows_Step) -> Bool {
    if lhs.uuid != rhs.uuid {return false}
    if lhs.workflowUuid != rhs.workflowUuid {return false}
    if lhs.status != rhs.status {return false}
    if lhs.step != rhs.step {return false}
    if lhs._payload != rhs._payload {return false}
    if lhs._error != rhs._error {return false}
    if lhs.updatedAt != rhs.updatedAt {return false}
    if lhs.createdAt != rhs.createdAt {return false}
    if lhs._metadata != rhs._metadata {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Workflows_Workflow: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Workflow"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uuid"),
    6: .standard(proto: "people_uuid"),
    7: .same(proto: "status"),
    2: .same(proto: "metadata"),
    8: .same(proto: "error"),
    3: .standard(proto: "updated_at"),
    4: .standard(proto: "created_at"),
    9: .standard(proto: "expires_in"),
    5: .same(proto: "steps"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.uuid) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._metadata) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.updatedAt) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.createdAt) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.steps) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.peopleUuid) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.status) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._error) }()
      case 9: try { try decoder.decodeSingularInt32Field(value: &self.expiresIn) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.uuid.isEmpty {
      try visitor.visitSingularStringField(value: self.uuid, fieldNumber: 1)
    }
    try { if let v = self._metadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.updatedAt.isEmpty {
      try visitor.visitSingularStringField(value: self.updatedAt, fieldNumber: 3)
    }
    if !self.createdAt.isEmpty {
      try visitor.visitSingularStringField(value: self.createdAt, fieldNumber: 4)
    }
    if !self.steps.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.steps, fieldNumber: 5)
    }
    if !self.peopleUuid.isEmpty {
      try visitor.visitSingularStringField(value: self.peopleUuid, fieldNumber: 6)
    }
    if !self.status.isEmpty {
      try visitor.visitSingularStringField(value: self.status, fieldNumber: 7)
    }
    try { if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    } }()
    if self.expiresIn != 0 {
      try visitor.visitSingularInt32Field(value: self.expiresIn, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Workflows_Workflow, rhs: Workflows_Workflow) -> Bool {
    if lhs.uuid != rhs.uuid {return false}
    if lhs.peopleUuid != rhs.peopleUuid {return false}
    if lhs.status != rhs.status {return false}
    if lhs._metadata != rhs._metadata {return false}
    if lhs._error != rhs._error {return false}
    if lhs.updatedAt != rhs.updatedAt {return false}
    if lhs.createdAt != rhs.createdAt {return false}
    if lhs.expiresIn != rhs.expiresIn {return false}
    if lhs.steps != rhs.steps {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
